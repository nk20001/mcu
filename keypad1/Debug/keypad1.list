
keypad1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08001170  08001170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001294  08001294  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001294  08001294  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001294  08001294  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001294  08001294  00011294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001298  08001298  00011298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800129c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08001304  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001304  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019f0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c7  00000000  00000000  00021a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  00022150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000228  00000000  00000000  000223e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fe9  00000000  00000000  00022608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ba5  00000000  00000000  000255f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c63a4  00000000  00000000  00028196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee53a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000eec  00000000  00000000  000ee58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001158 	.word	0x08001158

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08001158 	.word	0x08001158

08000204 <delay>:
#if !defined(_SOFT_FP) && defined(_ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(int T)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	int i;
	while(T--)
 800020c:	e009      	b.n	8000222 <delay+0x1e>
	{
	for(i=0;i<4000;i++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delay+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000220:	dbf8      	blt.n	8000214 <delay+0x10>
	while(T--)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	1e5a      	subs	r2, r3, #1
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d1f0      	bne.n	800020e <delay+0xa>
	}
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <main>:


int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0
	uint32_t *portcMODER =(uint32_t *)0x40020800;
 8000242:	4b89      	ldr	r3, [pc, #548]	; (8000468 <main+0x22c>)
 8000244:	617b      	str	r3, [r7, #20]
	uint32_t *portcAHB1ENR =(uint32_t *)0x40023830;
 8000246:	4b89      	ldr	r3, [pc, #548]	; (800046c <main+0x230>)
 8000248:	613b      	str	r3, [r7, #16]
	uint32_t *portcIDR =(uint32_t *)0x40020810;
 800024a:	4b89      	ldr	r3, [pc, #548]	; (8000470 <main+0x234>)
 800024c:	60fb      	str	r3, [r7, #12]
	uint32_t *portcODR =(uint32_t *)0x40020814;
 800024e:	4b89      	ldr	r3, [pc, #548]	; (8000474 <main+0x238>)
 8000250:	60bb      	str	r3, [r7, #8]

	uint32_t *portcPUPDR =(uint32_t *)0x4002080c;
 8000252:	4b89      	ldr	r3, [pc, #548]	; (8000478 <main+0x23c>)
 8000254:	607b      	str	r3, [r7, #4]

	//Enable the peripheral clock for GPIOC
		*portcAHB1ENR |= 0x4;
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0204 	orr.w	r2, r3, #4
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	601a      	str	r2, [r3, #0]
    //Rows -- PC0 -PC3 output mode
	    *portcMODER |= 0x55;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	601a      	str	r2, [r3, #0]
	 //columns --PC4-PC7 input mode
	    *portcMODER |= 0x00000000;
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	601a      	str	r2, [r3, #0]


	    *portcPUPDR |= 0x5500;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f443 42aa 	orr.w	r2, r3, #21760	; 0x5500
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	601a      	str	r2, [r3, #0]


	while(1)
	{
		//Make R1 low
		*portcODR |= 0x0F;
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 020f 	orr.w	r2, r3, #15
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<0);
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f023 0201 	bic.w	r2, r3, #1
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f003 0310 	and.w	r3, r3, #16
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d105      	bne.n	80002b2 <main+0x76>
		{
			delay(100);
 80002a6:	2064      	movs	r0, #100	; 0x64
 80002a8:	f7ff ffac 	bl	8000204 <delay>
			printf("1 pressed\n");
 80002ac:	4873      	ldr	r0, [pc, #460]	; (800047c <main+0x240>)
 80002ae:	f000 fac3 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f003 0320 	and.w	r3, r3, #32
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d105      	bne.n	80002ca <main+0x8e>
		{
			delay(100);
 80002be:	2064      	movs	r0, #100	; 0x64
 80002c0:	f7ff ffa0 	bl	8000204 <delay>
			printf("2 pressed\n");
 80002c4:	486e      	ldr	r0, [pc, #440]	; (8000480 <main+0x244>)
 80002c6:	f000 fab7 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d105      	bne.n	80002e2 <main+0xa6>
		{
			delay(100);
 80002d6:	2064      	movs	r0, #100	; 0x64
 80002d8:	f7ff ff94 	bl	8000204 <delay>
			printf("3 pressed\n");
 80002dc:	4869      	ldr	r0, [pc, #420]	; (8000484 <main+0x248>)
 80002de:	f000 faab 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <main+0xbe>
		{
			delay(100);
 80002ee:	2064      	movs	r0, #100	; 0x64
 80002f0:	f7ff ff88 	bl	8000204 <delay>
			printf("A pressed\n");
 80002f4:	4864      	ldr	r0, [pc, #400]	; (8000488 <main+0x24c>)
 80002f6:	f000 fa9f 	bl	8000838 <puts>
		}
		*portcODR |= 0x0F;
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f043 020f 	orr.w	r2, r3, #15
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<1);
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f023 0202 	bic.w	r2, r3, #2
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0310 	and.w	r3, r3, #16
 800031a:	2b00      	cmp	r3, #0
 800031c:	d105      	bne.n	800032a <main+0xee>
		{
			delay(100);
 800031e:	2064      	movs	r0, #100	; 0x64
 8000320:	f7ff ff70 	bl	8000204 <delay>
			printf("4 pressed\n");
 8000324:	4859      	ldr	r0, [pc, #356]	; (800048c <main+0x250>)
 8000326:	f000 fa87 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f003 0320 	and.w	r3, r3, #32
 8000332:	2b00      	cmp	r3, #0
 8000334:	d105      	bne.n	8000342 <main+0x106>
		{
			delay(100);
 8000336:	2064      	movs	r0, #100	; 0x64
 8000338:	f7ff ff64 	bl	8000204 <delay>
			printf("5 pressed\n");
 800033c:	4854      	ldr	r0, [pc, #336]	; (8000490 <main+0x254>)
 800033e:	f000 fa7b 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800034a:	2b00      	cmp	r3, #0
 800034c:	d105      	bne.n	800035a <main+0x11e>
		{
			delay(100);
 800034e:	2064      	movs	r0, #100	; 0x64
 8000350:	f7ff ff58 	bl	8000204 <delay>
			printf("6 pressed\n");
 8000354:	484f      	ldr	r0, [pc, #316]	; (8000494 <main+0x258>)
 8000356:	f000 fa6f 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000362:	2b00      	cmp	r3, #0
 8000364:	d105      	bne.n	8000372 <main+0x136>
		{
			delay(100);
 8000366:	2064      	movs	r0, #100	; 0x64
 8000368:	f7ff ff4c 	bl	8000204 <delay>
			printf("B pressed\n");
 800036c:	484a      	ldr	r0, [pc, #296]	; (8000498 <main+0x25c>)
 800036e:	f000 fa63 	bl	8000838 <puts>
		}
		*portcODR |= 0x0F;
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f043 020f 	orr.w	r2, r3, #15
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<2);
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f023 0204 	bic.w	r2, r3, #4
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f003 0310 	and.w	r3, r3, #16
 8000392:	2b00      	cmp	r3, #0
 8000394:	d105      	bne.n	80003a2 <main+0x166>
		{
			delay(100);
 8000396:	2064      	movs	r0, #100	; 0x64
 8000398:	f7ff ff34 	bl	8000204 <delay>
			printf("7 pressed\n");
 800039c:	483f      	ldr	r0, [pc, #252]	; (800049c <main+0x260>)
 800039e:	f000 fa4b 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d105      	bne.n	80003ba <main+0x17e>
		{
			delay(100);
 80003ae:	2064      	movs	r0, #100	; 0x64
 80003b0:	f7ff ff28 	bl	8000204 <delay>
			printf("8 pressed\n");
 80003b4:	483a      	ldr	r0, [pc, #232]	; (80004a0 <main+0x264>)
 80003b6:	f000 fa3f 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d105      	bne.n	80003d2 <main+0x196>
		{
			delay(100);
 80003c6:	2064      	movs	r0, #100	; 0x64
 80003c8:	f7ff ff1c 	bl	8000204 <delay>
			printf("9 pressed\n");
 80003cc:	4835      	ldr	r0, [pc, #212]	; (80004a4 <main+0x268>)
 80003ce:	f000 fa33 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d105      	bne.n	80003ea <main+0x1ae>
		{
			delay(100);
 80003de:	2064      	movs	r0, #100	; 0x64
 80003e0:	f7ff ff10 	bl	8000204 <delay>
			printf("C pressed\n");
 80003e4:	4830      	ldr	r0, [pc, #192]	; (80004a8 <main+0x26c>)
 80003e6:	f000 fa27 	bl	8000838 <puts>
		}
		*portcODR |= 0x0F;
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f043 020f 	orr.w	r2, r3, #15
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<3);
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 0208 	bic.w	r2, r3, #8
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f003 0310 	and.w	r3, r3, #16
 800040a:	2b00      	cmp	r3, #0
 800040c:	d105      	bne.n	800041a <main+0x1de>
		{
			delay(100);
 800040e:	2064      	movs	r0, #100	; 0x64
 8000410:	f7ff fef8 	bl	8000204 <delay>
			printf("* pressed\n");
 8000414:	4825      	ldr	r0, [pc, #148]	; (80004ac <main+0x270>)
 8000416:	f000 fa0f 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f003 0320 	and.w	r3, r3, #32
 8000422:	2b00      	cmp	r3, #0
 8000424:	d105      	bne.n	8000432 <main+0x1f6>
		{
			delay(100);
 8000426:	2064      	movs	r0, #100	; 0x64
 8000428:	f7ff feec 	bl	8000204 <delay>
			printf("0 pressed\n");
 800042c:	4820      	ldr	r0, [pc, #128]	; (80004b0 <main+0x274>)
 800042e:	f000 fa03 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800043a:	2b00      	cmp	r3, #0
 800043c:	d105      	bne.n	800044a <main+0x20e>
		{
			delay(100);
 800043e:	2064      	movs	r0, #100	; 0x64
 8000440:	f7ff fee0 	bl	8000204 <delay>
			printf("# pressed\n");
 8000444:	481b      	ldr	r0, [pc, #108]	; (80004b4 <main+0x278>)
 8000446:	f000 f9f7 	bl	8000838 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000452:	2b00      	cmp	r3, #0
 8000454:	f47f af15 	bne.w	8000282 <main+0x46>
		{
			delay(100);
 8000458:	2064      	movs	r0, #100	; 0x64
 800045a:	f7ff fed3 	bl	8000204 <delay>
			printf("D pressed\n");
 800045e:	4816      	ldr	r0, [pc, #88]	; (80004b8 <main+0x27c>)
 8000460:	f000 f9ea 	bl	8000838 <puts>
		*portcODR |= 0x0F;
 8000464:	e70d      	b.n	8000282 <main+0x46>
 8000466:	bf00      	nop
 8000468:	40020800 	.word	0x40020800
 800046c:	40023830 	.word	0x40023830
 8000470:	40020810 	.word	0x40020810
 8000474:	40020814 	.word	0x40020814
 8000478:	4002080c 	.word	0x4002080c
 800047c:	08001170 	.word	0x08001170
 8000480:	0800117c 	.word	0x0800117c
 8000484:	08001188 	.word	0x08001188
 8000488:	08001194 	.word	0x08001194
 800048c:	080011a0 	.word	0x080011a0
 8000490:	080011ac 	.word	0x080011ac
 8000494:	080011b8 	.word	0x080011b8
 8000498:	080011c4 	.word	0x080011c4
 800049c:	080011d0 	.word	0x080011d0
 80004a0:	080011dc 	.word	0x080011dc
 80004a4:	080011e8 	.word	0x080011e8
 80004a8:	080011f4 	.word	0x080011f4
 80004ac:	08001200 	.word	0x08001200
 80004b0:	0800120c 	.word	0x0800120c
 80004b4:	08001218 	.word	0x08001218
 80004b8:	08001224 	.word	0x08001224

080004bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <NMI_Handler+0x4>

080004c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <HardFault_Handler+0x4>

080004c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <MemManage_Handler+0x4>

080004ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <BusFault_Handler+0x4>

080004d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <UsageFault_Handler+0x4>

080004da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000508:	f000 f8e2 	bl	80006d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e00a      	b.n	8000538 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000522:	f3af 8000 	nop.w
 8000526:	4601      	mov	r1, r0
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	b2ca      	uxtb	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	dbf0      	blt.n	8000522 <_read+0x12>
  }

  return len;
 8000540:	687b      	ldr	r3, [r7, #4]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b086      	sub	sp, #24
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	60b9      	str	r1, [r7, #8]
 8000554:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e009      	b.n	8000570 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	60ba      	str	r2, [r7, #8]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	dbf1      	blt.n	800055c <_write+0x12>
  }
  return len;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_close>:

int _close(int file)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005aa:	605a      	str	r2, [r3, #4]
  return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <_isatty>:

int _isatty(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f4:	4a14      	ldr	r2, [pc, #80]	; (8000648 <_sbrk+0x5c>)
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <_sbrk+0x60>)
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d102      	bne.n	800060e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <_sbrk+0x64>)
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <_sbrk+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <_sbrk+0x64>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	d207      	bcs.n	800062c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800061c:	f000 f86c 	bl	80006f8 <__errno>
 8000620:	4603      	mov	r3, r0
 8000622:	220c      	movs	r2, #12
 8000624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	e009      	b.n	8000640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <_sbrk+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <_sbrk+0x64>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	4a05      	ldr	r2, [pc, #20]	; (8000650 <_sbrk+0x64>)
 800063c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20020000 	.word	0x20020000
 800064c:	00000400 	.word	0x00000400
 8000650:	20000084 	.word	0x20000084
 8000654:	200000a0 	.word	0x200000a0

08000658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <SystemInit+0x20>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <SystemInit+0x20>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000682:	490e      	ldr	r1, [pc, #56]	; (80006bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000698:	4c0b      	ldr	r4, [pc, #44]	; (80006c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006a6:	f7ff ffd7 	bl	8000658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006aa:	f000 f82b 	bl	8000704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ae:	f7ff fdc5 	bl	800023c <main>
  bx  lr    
 80006b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006c0:	0800129c 	.word	0x0800129c
  ldr r2, =_sbss
 80006c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006c8:	2000009c 	.word	0x2000009c

080006cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x20>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_IncTick+0x24>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_IncTick+0x24>)
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000088 	.word	0x20000088

080006f8 <__errno>:
 80006f8:	4b01      	ldr	r3, [pc, #4]	; (8000700 <__errno+0x8>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004

08000704 <__libc_init_array>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	4d0d      	ldr	r5, [pc, #52]	; (800073c <__libc_init_array+0x38>)
 8000708:	4c0d      	ldr	r4, [pc, #52]	; (8000740 <__libc_init_array+0x3c>)
 800070a:	1b64      	subs	r4, r4, r5
 800070c:	10a4      	asrs	r4, r4, #2
 800070e:	2600      	movs	r6, #0
 8000710:	42a6      	cmp	r6, r4
 8000712:	d109      	bne.n	8000728 <__libc_init_array+0x24>
 8000714:	4d0b      	ldr	r5, [pc, #44]	; (8000744 <__libc_init_array+0x40>)
 8000716:	4c0c      	ldr	r4, [pc, #48]	; (8000748 <__libc_init_array+0x44>)
 8000718:	f000 fd1e 	bl	8001158 <_init>
 800071c:	1b64      	subs	r4, r4, r5
 800071e:	10a4      	asrs	r4, r4, #2
 8000720:	2600      	movs	r6, #0
 8000722:	42a6      	cmp	r6, r4
 8000724:	d105      	bne.n	8000732 <__libc_init_array+0x2e>
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f855 3b04 	ldr.w	r3, [r5], #4
 800072c:	4798      	blx	r3
 800072e:	3601      	adds	r6, #1
 8000730:	e7ee      	b.n	8000710 <__libc_init_array+0xc>
 8000732:	f855 3b04 	ldr.w	r3, [r5], #4
 8000736:	4798      	blx	r3
 8000738:	3601      	adds	r6, #1
 800073a:	e7f2      	b.n	8000722 <__libc_init_array+0x1e>
 800073c:	08001294 	.word	0x08001294
 8000740:	08001294 	.word	0x08001294
 8000744:	08001294 	.word	0x08001294
 8000748:	08001298 	.word	0x08001298

0800074c <memset>:
 800074c:	4402      	add	r2, r0
 800074e:	4603      	mov	r3, r0
 8000750:	4293      	cmp	r3, r2
 8000752:	d100      	bne.n	8000756 <memset+0xa>
 8000754:	4770      	bx	lr
 8000756:	f803 1b01 	strb.w	r1, [r3], #1
 800075a:	e7f9      	b.n	8000750 <memset+0x4>

0800075c <_puts_r>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	460e      	mov	r6, r1
 8000760:	4605      	mov	r5, r0
 8000762:	b118      	cbz	r0, 800076c <_puts_r+0x10>
 8000764:	6983      	ldr	r3, [r0, #24]
 8000766:	b90b      	cbnz	r3, 800076c <_puts_r+0x10>
 8000768:	f000 fa48 	bl	8000bfc <__sinit>
 800076c:	69ab      	ldr	r3, [r5, #24]
 800076e:	68ac      	ldr	r4, [r5, #8]
 8000770:	b913      	cbnz	r3, 8000778 <_puts_r+0x1c>
 8000772:	4628      	mov	r0, r5
 8000774:	f000 fa42 	bl	8000bfc <__sinit>
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <_puts_r+0xd0>)
 800077a:	429c      	cmp	r4, r3
 800077c:	d120      	bne.n	80007c0 <_puts_r+0x64>
 800077e:	686c      	ldr	r4, [r5, #4]
 8000780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000782:	07db      	lsls	r3, r3, #31
 8000784:	d405      	bmi.n	8000792 <_puts_r+0x36>
 8000786:	89a3      	ldrh	r3, [r4, #12]
 8000788:	0598      	lsls	r0, r3, #22
 800078a:	d402      	bmi.n	8000792 <_puts_r+0x36>
 800078c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800078e:	f000 fad3 	bl	8000d38 <__retarget_lock_acquire_recursive>
 8000792:	89a3      	ldrh	r3, [r4, #12]
 8000794:	0719      	lsls	r1, r3, #28
 8000796:	d51d      	bpl.n	80007d4 <_puts_r+0x78>
 8000798:	6923      	ldr	r3, [r4, #16]
 800079a:	b1db      	cbz	r3, 80007d4 <_puts_r+0x78>
 800079c:	3e01      	subs	r6, #1
 800079e:	68a3      	ldr	r3, [r4, #8]
 80007a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007a4:	3b01      	subs	r3, #1
 80007a6:	60a3      	str	r3, [r4, #8]
 80007a8:	bb39      	cbnz	r1, 80007fa <_puts_r+0x9e>
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	da38      	bge.n	8000820 <_puts_r+0xc4>
 80007ae:	4622      	mov	r2, r4
 80007b0:	210a      	movs	r1, #10
 80007b2:	4628      	mov	r0, r5
 80007b4:	f000 f848 	bl	8000848 <__swbuf_r>
 80007b8:	3001      	adds	r0, #1
 80007ba:	d011      	beq.n	80007e0 <_puts_r+0x84>
 80007bc:	250a      	movs	r5, #10
 80007be:	e011      	b.n	80007e4 <_puts_r+0x88>
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <_puts_r+0xd4>)
 80007c2:	429c      	cmp	r4, r3
 80007c4:	d101      	bne.n	80007ca <_puts_r+0x6e>
 80007c6:	68ac      	ldr	r4, [r5, #8]
 80007c8:	e7da      	b.n	8000780 <_puts_r+0x24>
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <_puts_r+0xd8>)
 80007cc:	429c      	cmp	r4, r3
 80007ce:	bf08      	it	eq
 80007d0:	68ec      	ldreq	r4, [r5, #12]
 80007d2:	e7d5      	b.n	8000780 <_puts_r+0x24>
 80007d4:	4621      	mov	r1, r4
 80007d6:	4628      	mov	r0, r5
 80007d8:	f000 f888 	bl	80008ec <__swsetup_r>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d0dd      	beq.n	800079c <_puts_r+0x40>
 80007e0:	f04f 35ff 	mov.w	r5, #4294967295
 80007e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007e6:	07da      	lsls	r2, r3, #31
 80007e8:	d405      	bmi.n	80007f6 <_puts_r+0x9a>
 80007ea:	89a3      	ldrh	r3, [r4, #12]
 80007ec:	059b      	lsls	r3, r3, #22
 80007ee:	d402      	bmi.n	80007f6 <_puts_r+0x9a>
 80007f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007f2:	f000 faa2 	bl	8000d3a <__retarget_lock_release_recursive>
 80007f6:	4628      	mov	r0, r5
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da04      	bge.n	8000808 <_puts_r+0xac>
 80007fe:	69a2      	ldr	r2, [r4, #24]
 8000800:	429a      	cmp	r2, r3
 8000802:	dc06      	bgt.n	8000812 <_puts_r+0xb6>
 8000804:	290a      	cmp	r1, #10
 8000806:	d004      	beq.n	8000812 <_puts_r+0xb6>
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	6022      	str	r2, [r4, #0]
 800080e:	7019      	strb	r1, [r3, #0]
 8000810:	e7c5      	b.n	800079e <_puts_r+0x42>
 8000812:	4622      	mov	r2, r4
 8000814:	4628      	mov	r0, r5
 8000816:	f000 f817 	bl	8000848 <__swbuf_r>
 800081a:	3001      	adds	r0, #1
 800081c:	d1bf      	bne.n	800079e <_puts_r+0x42>
 800081e:	e7df      	b.n	80007e0 <_puts_r+0x84>
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	250a      	movs	r5, #10
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	6022      	str	r2, [r4, #0]
 8000828:	701d      	strb	r5, [r3, #0]
 800082a:	e7db      	b.n	80007e4 <_puts_r+0x88>
 800082c:	08001254 	.word	0x08001254
 8000830:	08001274 	.word	0x08001274
 8000834:	08001234 	.word	0x08001234

08000838 <puts>:
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <puts+0xc>)
 800083a:	4601      	mov	r1, r0
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	f7ff bf8d 	b.w	800075c <_puts_r>
 8000842:	bf00      	nop
 8000844:	20000004 	.word	0x20000004

08000848 <__swbuf_r>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	460e      	mov	r6, r1
 800084c:	4614      	mov	r4, r2
 800084e:	4605      	mov	r5, r0
 8000850:	b118      	cbz	r0, 800085a <__swbuf_r+0x12>
 8000852:	6983      	ldr	r3, [r0, #24]
 8000854:	b90b      	cbnz	r3, 800085a <__swbuf_r+0x12>
 8000856:	f000 f9d1 	bl	8000bfc <__sinit>
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <__swbuf_r+0x98>)
 800085c:	429c      	cmp	r4, r3
 800085e:	d12b      	bne.n	80008b8 <__swbuf_r+0x70>
 8000860:	686c      	ldr	r4, [r5, #4]
 8000862:	69a3      	ldr	r3, [r4, #24]
 8000864:	60a3      	str	r3, [r4, #8]
 8000866:	89a3      	ldrh	r3, [r4, #12]
 8000868:	071a      	lsls	r2, r3, #28
 800086a:	d52f      	bpl.n	80008cc <__swbuf_r+0x84>
 800086c:	6923      	ldr	r3, [r4, #16]
 800086e:	b36b      	cbz	r3, 80008cc <__swbuf_r+0x84>
 8000870:	6923      	ldr	r3, [r4, #16]
 8000872:	6820      	ldr	r0, [r4, #0]
 8000874:	1ac0      	subs	r0, r0, r3
 8000876:	6963      	ldr	r3, [r4, #20]
 8000878:	b2f6      	uxtb	r6, r6
 800087a:	4283      	cmp	r3, r0
 800087c:	4637      	mov	r7, r6
 800087e:	dc04      	bgt.n	800088a <__swbuf_r+0x42>
 8000880:	4621      	mov	r1, r4
 8000882:	4628      	mov	r0, r5
 8000884:	f000 f926 	bl	8000ad4 <_fflush_r>
 8000888:	bb30      	cbnz	r0, 80008d8 <__swbuf_r+0x90>
 800088a:	68a3      	ldr	r3, [r4, #8]
 800088c:	3b01      	subs	r3, #1
 800088e:	60a3      	str	r3, [r4, #8]
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	6022      	str	r2, [r4, #0]
 8000896:	701e      	strb	r6, [r3, #0]
 8000898:	6963      	ldr	r3, [r4, #20]
 800089a:	3001      	adds	r0, #1
 800089c:	4283      	cmp	r3, r0
 800089e:	d004      	beq.n	80008aa <__swbuf_r+0x62>
 80008a0:	89a3      	ldrh	r3, [r4, #12]
 80008a2:	07db      	lsls	r3, r3, #31
 80008a4:	d506      	bpl.n	80008b4 <__swbuf_r+0x6c>
 80008a6:	2e0a      	cmp	r6, #10
 80008a8:	d104      	bne.n	80008b4 <__swbuf_r+0x6c>
 80008aa:	4621      	mov	r1, r4
 80008ac:	4628      	mov	r0, r5
 80008ae:	f000 f911 	bl	8000ad4 <_fflush_r>
 80008b2:	b988      	cbnz	r0, 80008d8 <__swbuf_r+0x90>
 80008b4:	4638      	mov	r0, r7
 80008b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <__swbuf_r+0x9c>)
 80008ba:	429c      	cmp	r4, r3
 80008bc:	d101      	bne.n	80008c2 <__swbuf_r+0x7a>
 80008be:	68ac      	ldr	r4, [r5, #8]
 80008c0:	e7cf      	b.n	8000862 <__swbuf_r+0x1a>
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <__swbuf_r+0xa0>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	bf08      	it	eq
 80008c8:	68ec      	ldreq	r4, [r5, #12]
 80008ca:	e7ca      	b.n	8000862 <__swbuf_r+0x1a>
 80008cc:	4621      	mov	r1, r4
 80008ce:	4628      	mov	r0, r5
 80008d0:	f000 f80c 	bl	80008ec <__swsetup_r>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d0cb      	beq.n	8000870 <__swbuf_r+0x28>
 80008d8:	f04f 37ff 	mov.w	r7, #4294967295
 80008dc:	e7ea      	b.n	80008b4 <__swbuf_r+0x6c>
 80008de:	bf00      	nop
 80008e0:	08001254 	.word	0x08001254
 80008e4:	08001274 	.word	0x08001274
 80008e8:	08001234 	.word	0x08001234

080008ec <__swsetup_r>:
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <__swsetup_r+0xcc>)
 80008ee:	b570      	push	{r4, r5, r6, lr}
 80008f0:	681d      	ldr	r5, [r3, #0]
 80008f2:	4606      	mov	r6, r0
 80008f4:	460c      	mov	r4, r1
 80008f6:	b125      	cbz	r5, 8000902 <__swsetup_r+0x16>
 80008f8:	69ab      	ldr	r3, [r5, #24]
 80008fa:	b913      	cbnz	r3, 8000902 <__swsetup_r+0x16>
 80008fc:	4628      	mov	r0, r5
 80008fe:	f000 f97d 	bl	8000bfc <__sinit>
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <__swsetup_r+0xd0>)
 8000904:	429c      	cmp	r4, r3
 8000906:	d10f      	bne.n	8000928 <__swsetup_r+0x3c>
 8000908:	686c      	ldr	r4, [r5, #4]
 800090a:	89a3      	ldrh	r3, [r4, #12]
 800090c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000910:	0719      	lsls	r1, r3, #28
 8000912:	d42c      	bmi.n	800096e <__swsetup_r+0x82>
 8000914:	06dd      	lsls	r5, r3, #27
 8000916:	d411      	bmi.n	800093c <__swsetup_r+0x50>
 8000918:	2309      	movs	r3, #9
 800091a:	6033      	str	r3, [r6, #0]
 800091c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000920:	81a3      	strh	r3, [r4, #12]
 8000922:	f04f 30ff 	mov.w	r0, #4294967295
 8000926:	e03e      	b.n	80009a6 <__swsetup_r+0xba>
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <__swsetup_r+0xd4>)
 800092a:	429c      	cmp	r4, r3
 800092c:	d101      	bne.n	8000932 <__swsetup_r+0x46>
 800092e:	68ac      	ldr	r4, [r5, #8]
 8000930:	e7eb      	b.n	800090a <__swsetup_r+0x1e>
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <__swsetup_r+0xd8>)
 8000934:	429c      	cmp	r4, r3
 8000936:	bf08      	it	eq
 8000938:	68ec      	ldreq	r4, [r5, #12]
 800093a:	e7e6      	b.n	800090a <__swsetup_r+0x1e>
 800093c:	0758      	lsls	r0, r3, #29
 800093e:	d512      	bpl.n	8000966 <__swsetup_r+0x7a>
 8000940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000942:	b141      	cbz	r1, 8000956 <__swsetup_r+0x6a>
 8000944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000948:	4299      	cmp	r1, r3
 800094a:	d002      	beq.n	8000952 <__swsetup_r+0x66>
 800094c:	4630      	mov	r0, r6
 800094e:	f000 fa5b 	bl	8000e08 <_free_r>
 8000952:	2300      	movs	r3, #0
 8000954:	6363      	str	r3, [r4, #52]	; 0x34
 8000956:	89a3      	ldrh	r3, [r4, #12]
 8000958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800095c:	81a3      	strh	r3, [r4, #12]
 800095e:	2300      	movs	r3, #0
 8000960:	6063      	str	r3, [r4, #4]
 8000962:	6923      	ldr	r3, [r4, #16]
 8000964:	6023      	str	r3, [r4, #0]
 8000966:	89a3      	ldrh	r3, [r4, #12]
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	81a3      	strh	r3, [r4, #12]
 800096e:	6923      	ldr	r3, [r4, #16]
 8000970:	b94b      	cbnz	r3, 8000986 <__swsetup_r+0x9a>
 8000972:	89a3      	ldrh	r3, [r4, #12]
 8000974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800097c:	d003      	beq.n	8000986 <__swsetup_r+0x9a>
 800097e:	4621      	mov	r1, r4
 8000980:	4630      	mov	r0, r6
 8000982:	f000 fa01 	bl	8000d88 <__smakebuf_r>
 8000986:	89a0      	ldrh	r0, [r4, #12]
 8000988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800098c:	f010 0301 	ands.w	r3, r0, #1
 8000990:	d00a      	beq.n	80009a8 <__swsetup_r+0xbc>
 8000992:	2300      	movs	r3, #0
 8000994:	60a3      	str	r3, [r4, #8]
 8000996:	6963      	ldr	r3, [r4, #20]
 8000998:	425b      	negs	r3, r3
 800099a:	61a3      	str	r3, [r4, #24]
 800099c:	6923      	ldr	r3, [r4, #16]
 800099e:	b943      	cbnz	r3, 80009b2 <__swsetup_r+0xc6>
 80009a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009a4:	d1ba      	bne.n	800091c <__swsetup_r+0x30>
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	0781      	lsls	r1, r0, #30
 80009aa:	bf58      	it	pl
 80009ac:	6963      	ldrpl	r3, [r4, #20]
 80009ae:	60a3      	str	r3, [r4, #8]
 80009b0:	e7f4      	b.n	800099c <__swsetup_r+0xb0>
 80009b2:	2000      	movs	r0, #0
 80009b4:	e7f7      	b.n	80009a6 <__swsetup_r+0xba>
 80009b6:	bf00      	nop
 80009b8:	20000004 	.word	0x20000004
 80009bc:	08001254 	.word	0x08001254
 80009c0:	08001274 	.word	0x08001274
 80009c4:	08001234 	.word	0x08001234

080009c8 <__sflush_r>:
 80009c8:	898a      	ldrh	r2, [r1, #12]
 80009ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ce:	4605      	mov	r5, r0
 80009d0:	0710      	lsls	r0, r2, #28
 80009d2:	460c      	mov	r4, r1
 80009d4:	d458      	bmi.n	8000a88 <__sflush_r+0xc0>
 80009d6:	684b      	ldr	r3, [r1, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	dc05      	bgt.n	80009e8 <__sflush_r+0x20>
 80009dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009de:	2b00      	cmp	r3, #0
 80009e0:	dc02      	bgt.n	80009e8 <__sflush_r+0x20>
 80009e2:	2000      	movs	r0, #0
 80009e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d0f9      	beq.n	80009e2 <__sflush_r+0x1a>
 80009ee:	2300      	movs	r3, #0
 80009f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009f4:	682f      	ldr	r7, [r5, #0]
 80009f6:	602b      	str	r3, [r5, #0]
 80009f8:	d032      	beq.n	8000a60 <__sflush_r+0x98>
 80009fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009fc:	89a3      	ldrh	r3, [r4, #12]
 80009fe:	075a      	lsls	r2, r3, #29
 8000a00:	d505      	bpl.n	8000a0e <__sflush_r+0x46>
 8000a02:	6863      	ldr	r3, [r4, #4]
 8000a04:	1ac0      	subs	r0, r0, r3
 8000a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a08:	b10b      	cbz	r3, 8000a0e <__sflush_r+0x46>
 8000a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a0c:	1ac0      	subs	r0, r0, r3
 8000a0e:	2300      	movs	r3, #0
 8000a10:	4602      	mov	r2, r0
 8000a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a14:	6a21      	ldr	r1, [r4, #32]
 8000a16:	4628      	mov	r0, r5
 8000a18:	47b0      	blx	r6
 8000a1a:	1c43      	adds	r3, r0, #1
 8000a1c:	89a3      	ldrh	r3, [r4, #12]
 8000a1e:	d106      	bne.n	8000a2e <__sflush_r+0x66>
 8000a20:	6829      	ldr	r1, [r5, #0]
 8000a22:	291d      	cmp	r1, #29
 8000a24:	d82c      	bhi.n	8000a80 <__sflush_r+0xb8>
 8000a26:	4a2a      	ldr	r2, [pc, #168]	; (8000ad0 <__sflush_r+0x108>)
 8000a28:	40ca      	lsrs	r2, r1
 8000a2a:	07d6      	lsls	r6, r2, #31
 8000a2c:	d528      	bpl.n	8000a80 <__sflush_r+0xb8>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	6062      	str	r2, [r4, #4]
 8000a32:	04d9      	lsls	r1, r3, #19
 8000a34:	6922      	ldr	r2, [r4, #16]
 8000a36:	6022      	str	r2, [r4, #0]
 8000a38:	d504      	bpl.n	8000a44 <__sflush_r+0x7c>
 8000a3a:	1c42      	adds	r2, r0, #1
 8000a3c:	d101      	bne.n	8000a42 <__sflush_r+0x7a>
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	b903      	cbnz	r3, 8000a44 <__sflush_r+0x7c>
 8000a42:	6560      	str	r0, [r4, #84]	; 0x54
 8000a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a46:	602f      	str	r7, [r5, #0]
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d0ca      	beq.n	80009e2 <__sflush_r+0x1a>
 8000a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a50:	4299      	cmp	r1, r3
 8000a52:	d002      	beq.n	8000a5a <__sflush_r+0x92>
 8000a54:	4628      	mov	r0, r5
 8000a56:	f000 f9d7 	bl	8000e08 <_free_r>
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8000a5e:	e7c1      	b.n	80009e4 <__sflush_r+0x1c>
 8000a60:	6a21      	ldr	r1, [r4, #32]
 8000a62:	2301      	movs	r3, #1
 8000a64:	4628      	mov	r0, r5
 8000a66:	47b0      	blx	r6
 8000a68:	1c41      	adds	r1, r0, #1
 8000a6a:	d1c7      	bne.n	80009fc <__sflush_r+0x34>
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0c4      	beq.n	80009fc <__sflush_r+0x34>
 8000a72:	2b1d      	cmp	r3, #29
 8000a74:	d001      	beq.n	8000a7a <__sflush_r+0xb2>
 8000a76:	2b16      	cmp	r3, #22
 8000a78:	d101      	bne.n	8000a7e <__sflush_r+0xb6>
 8000a7a:	602f      	str	r7, [r5, #0]
 8000a7c:	e7b1      	b.n	80009e2 <__sflush_r+0x1a>
 8000a7e:	89a3      	ldrh	r3, [r4, #12]
 8000a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a84:	81a3      	strh	r3, [r4, #12]
 8000a86:	e7ad      	b.n	80009e4 <__sflush_r+0x1c>
 8000a88:	690f      	ldr	r7, [r1, #16]
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d0a9      	beq.n	80009e2 <__sflush_r+0x1a>
 8000a8e:	0793      	lsls	r3, r2, #30
 8000a90:	680e      	ldr	r6, [r1, #0]
 8000a92:	bf08      	it	eq
 8000a94:	694b      	ldreq	r3, [r1, #20]
 8000a96:	600f      	str	r7, [r1, #0]
 8000a98:	bf18      	it	ne
 8000a9a:	2300      	movne	r3, #0
 8000a9c:	eba6 0807 	sub.w	r8, r6, r7
 8000aa0:	608b      	str	r3, [r1, #8]
 8000aa2:	f1b8 0f00 	cmp.w	r8, #0
 8000aa6:	dd9c      	ble.n	80009e2 <__sflush_r+0x1a>
 8000aa8:	6a21      	ldr	r1, [r4, #32]
 8000aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000aac:	4643      	mov	r3, r8
 8000aae:	463a      	mov	r2, r7
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	47b0      	blx	r6
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	dc06      	bgt.n	8000ac6 <__sflush_r+0xfe>
 8000ab8:	89a3      	ldrh	r3, [r4, #12]
 8000aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abe:	81a3      	strh	r3, [r4, #12]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	e78e      	b.n	80009e4 <__sflush_r+0x1c>
 8000ac6:	4407      	add	r7, r0
 8000ac8:	eba8 0800 	sub.w	r8, r8, r0
 8000acc:	e7e9      	b.n	8000aa2 <__sflush_r+0xda>
 8000ace:	bf00      	nop
 8000ad0:	20400001 	.word	0x20400001

08000ad4 <_fflush_r>:
 8000ad4:	b538      	push	{r3, r4, r5, lr}
 8000ad6:	690b      	ldr	r3, [r1, #16]
 8000ad8:	4605      	mov	r5, r0
 8000ada:	460c      	mov	r4, r1
 8000adc:	b913      	cbnz	r3, 8000ae4 <_fflush_r+0x10>
 8000ade:	2500      	movs	r5, #0
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	bd38      	pop	{r3, r4, r5, pc}
 8000ae4:	b118      	cbz	r0, 8000aee <_fflush_r+0x1a>
 8000ae6:	6983      	ldr	r3, [r0, #24]
 8000ae8:	b90b      	cbnz	r3, 8000aee <_fflush_r+0x1a>
 8000aea:	f000 f887 	bl	8000bfc <__sinit>
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <_fflush_r+0x6c>)
 8000af0:	429c      	cmp	r4, r3
 8000af2:	d11b      	bne.n	8000b2c <_fflush_r+0x58>
 8000af4:	686c      	ldr	r4, [r5, #4]
 8000af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0ef      	beq.n	8000ade <_fflush_r+0xa>
 8000afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b00:	07d0      	lsls	r0, r2, #31
 8000b02:	d404      	bmi.n	8000b0e <_fflush_r+0x3a>
 8000b04:	0599      	lsls	r1, r3, #22
 8000b06:	d402      	bmi.n	8000b0e <_fflush_r+0x3a>
 8000b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b0a:	f000 f915 	bl	8000d38 <__retarget_lock_acquire_recursive>
 8000b0e:	4628      	mov	r0, r5
 8000b10:	4621      	mov	r1, r4
 8000b12:	f7ff ff59 	bl	80009c8 <__sflush_r>
 8000b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b18:	07da      	lsls	r2, r3, #31
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	d4e0      	bmi.n	8000ae0 <_fflush_r+0xc>
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	059b      	lsls	r3, r3, #22
 8000b22:	d4dd      	bmi.n	8000ae0 <_fflush_r+0xc>
 8000b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b26:	f000 f908 	bl	8000d3a <__retarget_lock_release_recursive>
 8000b2a:	e7d9      	b.n	8000ae0 <_fflush_r+0xc>
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_fflush_r+0x70>)
 8000b2e:	429c      	cmp	r4, r3
 8000b30:	d101      	bne.n	8000b36 <_fflush_r+0x62>
 8000b32:	68ac      	ldr	r4, [r5, #8]
 8000b34:	e7df      	b.n	8000af6 <_fflush_r+0x22>
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <_fflush_r+0x74>)
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	bf08      	it	eq
 8000b3c:	68ec      	ldreq	r4, [r5, #12]
 8000b3e:	e7da      	b.n	8000af6 <_fflush_r+0x22>
 8000b40:	08001254 	.word	0x08001254
 8000b44:	08001274 	.word	0x08001274
 8000b48:	08001234 	.word	0x08001234

08000b4c <std>:
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	b510      	push	{r4, lr}
 8000b50:	4604      	mov	r4, r0
 8000b52:	e9c0 3300 	strd	r3, r3, [r0]
 8000b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b5a:	6083      	str	r3, [r0, #8]
 8000b5c:	8181      	strh	r1, [r0, #12]
 8000b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8000b60:	81c2      	strh	r2, [r0, #14]
 8000b62:	6183      	str	r3, [r0, #24]
 8000b64:	4619      	mov	r1, r3
 8000b66:	2208      	movs	r2, #8
 8000b68:	305c      	adds	r0, #92	; 0x5c
 8000b6a:	f7ff fdef 	bl	800074c <memset>
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <std+0x38>)
 8000b70:	6263      	str	r3, [r4, #36]	; 0x24
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <std+0x3c>)
 8000b74:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <std+0x40>)
 8000b78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <std+0x44>)
 8000b7c:	6224      	str	r4, [r4, #32]
 8000b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	bf00      	nop
 8000b84:	08000fe9 	.word	0x08000fe9
 8000b88:	0800100b 	.word	0x0800100b
 8000b8c:	08001043 	.word	0x08001043
 8000b90:	08001067 	.word	0x08001067

08000b94 <_cleanup_r>:
 8000b94:	4901      	ldr	r1, [pc, #4]	; (8000b9c <_cleanup_r+0x8>)
 8000b96:	f000 b8af 	b.w	8000cf8 <_fwalk_reent>
 8000b9a:	bf00      	nop
 8000b9c:	08000ad5 	.word	0x08000ad5

08000ba0 <__sfmoreglue>:
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	2268      	movs	r2, #104	; 0x68
 8000ba4:	1e4d      	subs	r5, r1, #1
 8000ba6:	4355      	muls	r5, r2
 8000ba8:	460e      	mov	r6, r1
 8000baa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000bae:	f000 f997 	bl	8000ee0 <_malloc_r>
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	b140      	cbz	r0, 8000bc8 <__sfmoreglue+0x28>
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	e9c0 1600 	strd	r1, r6, [r0]
 8000bbc:	300c      	adds	r0, #12
 8000bbe:	60a0      	str	r0, [r4, #8]
 8000bc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000bc4:	f7ff fdc2 	bl	800074c <memset>
 8000bc8:	4620      	mov	r0, r4
 8000bca:	bd70      	pop	{r4, r5, r6, pc}

08000bcc <__sfp_lock_acquire>:
 8000bcc:	4801      	ldr	r0, [pc, #4]	; (8000bd4 <__sfp_lock_acquire+0x8>)
 8000bce:	f000 b8b3 	b.w	8000d38 <__retarget_lock_acquire_recursive>
 8000bd2:	bf00      	nop
 8000bd4:	2000008d 	.word	0x2000008d

08000bd8 <__sfp_lock_release>:
 8000bd8:	4801      	ldr	r0, [pc, #4]	; (8000be0 <__sfp_lock_release+0x8>)
 8000bda:	f000 b8ae 	b.w	8000d3a <__retarget_lock_release_recursive>
 8000bde:	bf00      	nop
 8000be0:	2000008d 	.word	0x2000008d

08000be4 <__sinit_lock_acquire>:
 8000be4:	4801      	ldr	r0, [pc, #4]	; (8000bec <__sinit_lock_acquire+0x8>)
 8000be6:	f000 b8a7 	b.w	8000d38 <__retarget_lock_acquire_recursive>
 8000bea:	bf00      	nop
 8000bec:	2000008e 	.word	0x2000008e

08000bf0 <__sinit_lock_release>:
 8000bf0:	4801      	ldr	r0, [pc, #4]	; (8000bf8 <__sinit_lock_release+0x8>)
 8000bf2:	f000 b8a2 	b.w	8000d3a <__retarget_lock_release_recursive>
 8000bf6:	bf00      	nop
 8000bf8:	2000008e 	.word	0x2000008e

08000bfc <__sinit>:
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4604      	mov	r4, r0
 8000c00:	f7ff fff0 	bl	8000be4 <__sinit_lock_acquire>
 8000c04:	69a3      	ldr	r3, [r4, #24]
 8000c06:	b11b      	cbz	r3, 8000c10 <__sinit+0x14>
 8000c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c0c:	f7ff bff0 	b.w	8000bf0 <__sinit_lock_release>
 8000c10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c14:	6523      	str	r3, [r4, #80]	; 0x50
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <__sinit+0x68>)
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <__sinit+0x6c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	bf04      	itt	eq
 8000c22:	2301      	moveq	r3, #1
 8000c24:	61a3      	streq	r3, [r4, #24]
 8000c26:	4620      	mov	r0, r4
 8000c28:	f000 f820 	bl	8000c6c <__sfp>
 8000c2c:	6060      	str	r0, [r4, #4]
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f000 f81c 	bl	8000c6c <__sfp>
 8000c34:	60a0      	str	r0, [r4, #8]
 8000c36:	4620      	mov	r0, r4
 8000c38:	f000 f818 	bl	8000c6c <__sfp>
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60e0      	str	r0, [r4, #12]
 8000c40:	2104      	movs	r1, #4
 8000c42:	6860      	ldr	r0, [r4, #4]
 8000c44:	f7ff ff82 	bl	8000b4c <std>
 8000c48:	68a0      	ldr	r0, [r4, #8]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2109      	movs	r1, #9
 8000c4e:	f7ff ff7d 	bl	8000b4c <std>
 8000c52:	68e0      	ldr	r0, [r4, #12]
 8000c54:	2202      	movs	r2, #2
 8000c56:	2112      	movs	r1, #18
 8000c58:	f7ff ff78 	bl	8000b4c <std>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61a3      	str	r3, [r4, #24]
 8000c60:	e7d2      	b.n	8000c08 <__sinit+0xc>
 8000c62:	bf00      	nop
 8000c64:	08001230 	.word	0x08001230
 8000c68:	08000b95 	.word	0x08000b95

08000c6c <__sfp>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	4607      	mov	r7, r0
 8000c70:	f7ff ffac 	bl	8000bcc <__sfp_lock_acquire>
 8000c74:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <__sfp+0x84>)
 8000c76:	681e      	ldr	r6, [r3, #0]
 8000c78:	69b3      	ldr	r3, [r6, #24]
 8000c7a:	b913      	cbnz	r3, 8000c82 <__sfp+0x16>
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	f7ff ffbd 	bl	8000bfc <__sinit>
 8000c82:	3648      	adds	r6, #72	; 0x48
 8000c84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	d503      	bpl.n	8000c94 <__sfp+0x28>
 8000c8c:	6833      	ldr	r3, [r6, #0]
 8000c8e:	b30b      	cbz	r3, 8000cd4 <__sfp+0x68>
 8000c90:	6836      	ldr	r6, [r6, #0]
 8000c92:	e7f7      	b.n	8000c84 <__sfp+0x18>
 8000c94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c98:	b9d5      	cbnz	r5, 8000cd0 <__sfp+0x64>
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <__sfp+0x88>)
 8000c9c:	60e3      	str	r3, [r4, #12]
 8000c9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ca2:	6665      	str	r5, [r4, #100]	; 0x64
 8000ca4:	f000 f847 	bl	8000d36 <__retarget_lock_init_recursive>
 8000ca8:	f7ff ff96 	bl	8000bd8 <__sfp_lock_release>
 8000cac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000cb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cb4:	6025      	str	r5, [r4, #0]
 8000cb6:	61a5      	str	r5, [r4, #24]
 8000cb8:	2208      	movs	r2, #8
 8000cba:	4629      	mov	r1, r5
 8000cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000cc0:	f7ff fd44 	bl	800074c <memset>
 8000cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ccc:	4620      	mov	r0, r4
 8000cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd0:	3468      	adds	r4, #104	; 0x68
 8000cd2:	e7d9      	b.n	8000c88 <__sfp+0x1c>
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	f7ff ff62 	bl	8000ba0 <__sfmoreglue>
 8000cdc:	4604      	mov	r4, r0
 8000cde:	6030      	str	r0, [r6, #0]
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d1d5      	bne.n	8000c90 <__sfp+0x24>
 8000ce4:	f7ff ff78 	bl	8000bd8 <__sfp_lock_release>
 8000ce8:	230c      	movs	r3, #12
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	e7ee      	b.n	8000ccc <__sfp+0x60>
 8000cee:	bf00      	nop
 8000cf0:	08001230 	.word	0x08001230
 8000cf4:	ffff0001 	.word	0xffff0001

08000cf8 <_fwalk_reent>:
 8000cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	4688      	mov	r8, r1
 8000d00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d04:	2700      	movs	r7, #0
 8000d06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d0a:	f1b9 0901 	subs.w	r9, r9, #1
 8000d0e:	d505      	bpl.n	8000d1c <_fwalk_reent+0x24>
 8000d10:	6824      	ldr	r4, [r4, #0]
 8000d12:	2c00      	cmp	r4, #0
 8000d14:	d1f7      	bne.n	8000d06 <_fwalk_reent+0xe>
 8000d16:	4638      	mov	r0, r7
 8000d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d1c:	89ab      	ldrh	r3, [r5, #12]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d907      	bls.n	8000d32 <_fwalk_reent+0x3a>
 8000d22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d26:	3301      	adds	r3, #1
 8000d28:	d003      	beq.n	8000d32 <_fwalk_reent+0x3a>
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	47c0      	blx	r8
 8000d30:	4307      	orrs	r7, r0
 8000d32:	3568      	adds	r5, #104	; 0x68
 8000d34:	e7e9      	b.n	8000d0a <_fwalk_reent+0x12>

08000d36 <__retarget_lock_init_recursive>:
 8000d36:	4770      	bx	lr

08000d38 <__retarget_lock_acquire_recursive>:
 8000d38:	4770      	bx	lr

08000d3a <__retarget_lock_release_recursive>:
 8000d3a:	4770      	bx	lr

08000d3c <__swhatbuf_r>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	460e      	mov	r6, r1
 8000d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d44:	2900      	cmp	r1, #0
 8000d46:	b096      	sub	sp, #88	; 0x58
 8000d48:	4614      	mov	r4, r2
 8000d4a:	461d      	mov	r5, r3
 8000d4c:	da08      	bge.n	8000d60 <__swhatbuf_r+0x24>
 8000d4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d52:	2200      	movs	r2, #0
 8000d54:	602a      	str	r2, [r5, #0]
 8000d56:	061a      	lsls	r2, r3, #24
 8000d58:	d410      	bmi.n	8000d7c <__swhatbuf_r+0x40>
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	e00e      	b.n	8000d7e <__swhatbuf_r+0x42>
 8000d60:	466a      	mov	r2, sp
 8000d62:	f000 f9a7 	bl	80010b4 <_fstat_r>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	dbf1      	blt.n	8000d4e <__swhatbuf_r+0x12>
 8000d6a:	9a01      	ldr	r2, [sp, #4]
 8000d6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d74:	425a      	negs	r2, r3
 8000d76:	415a      	adcs	r2, r3
 8000d78:	602a      	str	r2, [r5, #0]
 8000d7a:	e7ee      	b.n	8000d5a <__swhatbuf_r+0x1e>
 8000d7c:	2340      	movs	r3, #64	; 0x40
 8000d7e:	2000      	movs	r0, #0
 8000d80:	6023      	str	r3, [r4, #0]
 8000d82:	b016      	add	sp, #88	; 0x58
 8000d84:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d88 <__smakebuf_r>:
 8000d88:	898b      	ldrh	r3, [r1, #12]
 8000d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d8c:	079d      	lsls	r5, r3, #30
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460c      	mov	r4, r1
 8000d92:	d507      	bpl.n	8000da4 <__smakebuf_r+0x1c>
 8000d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	6123      	str	r3, [r4, #16]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	6163      	str	r3, [r4, #20]
 8000da0:	b002      	add	sp, #8
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	ab01      	add	r3, sp, #4
 8000da6:	466a      	mov	r2, sp
 8000da8:	f7ff ffc8 	bl	8000d3c <__swhatbuf_r>
 8000dac:	9900      	ldr	r1, [sp, #0]
 8000dae:	4605      	mov	r5, r0
 8000db0:	4630      	mov	r0, r6
 8000db2:	f000 f895 	bl	8000ee0 <_malloc_r>
 8000db6:	b948      	cbnz	r0, 8000dcc <__smakebuf_r+0x44>
 8000db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dbc:	059a      	lsls	r2, r3, #22
 8000dbe:	d4ef      	bmi.n	8000da0 <__smakebuf_r+0x18>
 8000dc0:	f023 0303 	bic.w	r3, r3, #3
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	81a3      	strh	r3, [r4, #12]
 8000dca:	e7e3      	b.n	8000d94 <__smakebuf_r+0xc>
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <__smakebuf_r+0x7c>)
 8000dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8000dd0:	89a3      	ldrh	r3, [r4, #12]
 8000dd2:	6020      	str	r0, [r4, #0]
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	81a3      	strh	r3, [r4, #12]
 8000dda:	9b00      	ldr	r3, [sp, #0]
 8000ddc:	6163      	str	r3, [r4, #20]
 8000dde:	9b01      	ldr	r3, [sp, #4]
 8000de0:	6120      	str	r0, [r4, #16]
 8000de2:	b15b      	cbz	r3, 8000dfc <__smakebuf_r+0x74>
 8000de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000de8:	4630      	mov	r0, r6
 8000dea:	f000 f975 	bl	80010d8 <_isatty_r>
 8000dee:	b128      	cbz	r0, 8000dfc <__smakebuf_r+0x74>
 8000df0:	89a3      	ldrh	r3, [r4, #12]
 8000df2:	f023 0303 	bic.w	r3, r3, #3
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	81a3      	strh	r3, [r4, #12]
 8000dfc:	89a0      	ldrh	r0, [r4, #12]
 8000dfe:	4305      	orrs	r5, r0
 8000e00:	81a5      	strh	r5, [r4, #12]
 8000e02:	e7cd      	b.n	8000da0 <__smakebuf_r+0x18>
 8000e04:	08000b95 	.word	0x08000b95

08000e08 <_free_r>:
 8000e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	d044      	beq.n	8000e98 <_free_r+0x90>
 8000e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e12:	9001      	str	r0, [sp, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f1a1 0404 	sub.w	r4, r1, #4
 8000e1a:	bfb8      	it	lt
 8000e1c:	18e4      	addlt	r4, r4, r3
 8000e1e:	f000 f97d 	bl	800111c <__malloc_lock>
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <_free_r+0x94>)
 8000e24:	9801      	ldr	r0, [sp, #4]
 8000e26:	6813      	ldr	r3, [r2, #0]
 8000e28:	b933      	cbnz	r3, 8000e38 <_free_r+0x30>
 8000e2a:	6063      	str	r3, [r4, #4]
 8000e2c:	6014      	str	r4, [r2, #0]
 8000e2e:	b003      	add	sp, #12
 8000e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e34:	f000 b978 	b.w	8001128 <__malloc_unlock>
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <_free_r+0x46>
 8000e3c:	6825      	ldr	r5, [r4, #0]
 8000e3e:	1961      	adds	r1, r4, r5
 8000e40:	428b      	cmp	r3, r1
 8000e42:	bf01      	itttt	eq
 8000e44:	6819      	ldreq	r1, [r3, #0]
 8000e46:	685b      	ldreq	r3, [r3, #4]
 8000e48:	1949      	addeq	r1, r1, r5
 8000e4a:	6021      	streq	r1, [r4, #0]
 8000e4c:	e7ed      	b.n	8000e2a <_free_r+0x22>
 8000e4e:	461a      	mov	r2, r3
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	b10b      	cbz	r3, 8000e58 <_free_r+0x50>
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	d9fa      	bls.n	8000e4e <_free_r+0x46>
 8000e58:	6811      	ldr	r1, [r2, #0]
 8000e5a:	1855      	adds	r5, r2, r1
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	d10b      	bne.n	8000e78 <_free_r+0x70>
 8000e60:	6824      	ldr	r4, [r4, #0]
 8000e62:	4421      	add	r1, r4
 8000e64:	1854      	adds	r4, r2, r1
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	6011      	str	r1, [r2, #0]
 8000e6a:	d1e0      	bne.n	8000e2e <_free_r+0x26>
 8000e6c:	681c      	ldr	r4, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	6053      	str	r3, [r2, #4]
 8000e72:	4421      	add	r1, r4
 8000e74:	6011      	str	r1, [r2, #0]
 8000e76:	e7da      	b.n	8000e2e <_free_r+0x26>
 8000e78:	d902      	bls.n	8000e80 <_free_r+0x78>
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	6003      	str	r3, [r0, #0]
 8000e7e:	e7d6      	b.n	8000e2e <_free_r+0x26>
 8000e80:	6825      	ldr	r5, [r4, #0]
 8000e82:	1961      	adds	r1, r4, r5
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf04      	itt	eq
 8000e88:	6819      	ldreq	r1, [r3, #0]
 8000e8a:	685b      	ldreq	r3, [r3, #4]
 8000e8c:	6063      	str	r3, [r4, #4]
 8000e8e:	bf04      	itt	eq
 8000e90:	1949      	addeq	r1, r1, r5
 8000e92:	6021      	streq	r1, [r4, #0]
 8000e94:	6054      	str	r4, [r2, #4]
 8000e96:	e7ca      	b.n	8000e2e <_free_r+0x26>
 8000e98:	b003      	add	sp, #12
 8000e9a:	bd30      	pop	{r4, r5, pc}
 8000e9c:	20000090 	.word	0x20000090

08000ea0 <sbrk_aligned>:
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	4e0e      	ldr	r6, [pc, #56]	; (8000edc <sbrk_aligned+0x3c>)
 8000ea4:	460c      	mov	r4, r1
 8000ea6:	6831      	ldr	r1, [r6, #0]
 8000ea8:	4605      	mov	r5, r0
 8000eaa:	b911      	cbnz	r1, 8000eb2 <sbrk_aligned+0x12>
 8000eac:	f000 f88c 	bl	8000fc8 <_sbrk_r>
 8000eb0:	6030      	str	r0, [r6, #0]
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f000 f887 	bl	8000fc8 <_sbrk_r>
 8000eba:	1c43      	adds	r3, r0, #1
 8000ebc:	d00a      	beq.n	8000ed4 <sbrk_aligned+0x34>
 8000ebe:	1cc4      	adds	r4, r0, #3
 8000ec0:	f024 0403 	bic.w	r4, r4, #3
 8000ec4:	42a0      	cmp	r0, r4
 8000ec6:	d007      	beq.n	8000ed8 <sbrk_aligned+0x38>
 8000ec8:	1a21      	subs	r1, r4, r0
 8000eca:	4628      	mov	r0, r5
 8000ecc:	f000 f87c 	bl	8000fc8 <_sbrk_r>
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	d101      	bne.n	8000ed8 <sbrk_aligned+0x38>
 8000ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8000ed8:	4620      	mov	r0, r4
 8000eda:	bd70      	pop	{r4, r5, r6, pc}
 8000edc:	20000094 	.word	0x20000094

08000ee0 <_malloc_r>:
 8000ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee4:	1ccd      	adds	r5, r1, #3
 8000ee6:	f025 0503 	bic.w	r5, r5, #3
 8000eea:	3508      	adds	r5, #8
 8000eec:	2d0c      	cmp	r5, #12
 8000eee:	bf38      	it	cc
 8000ef0:	250c      	movcc	r5, #12
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	db01      	blt.n	8000efc <_malloc_r+0x1c>
 8000ef8:	42a9      	cmp	r1, r5
 8000efa:	d905      	bls.n	8000f08 <_malloc_r+0x28>
 8000efc:	230c      	movs	r3, #12
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	2600      	movs	r6, #0
 8000f02:	4630      	mov	r0, r6
 8000f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f08:	4e2e      	ldr	r6, [pc, #184]	; (8000fc4 <_malloc_r+0xe4>)
 8000f0a:	f000 f907 	bl	800111c <__malloc_lock>
 8000f0e:	6833      	ldr	r3, [r6, #0]
 8000f10:	461c      	mov	r4, r3
 8000f12:	bb34      	cbnz	r4, 8000f62 <_malloc_r+0x82>
 8000f14:	4629      	mov	r1, r5
 8000f16:	4638      	mov	r0, r7
 8000f18:	f7ff ffc2 	bl	8000ea0 <sbrk_aligned>
 8000f1c:	1c43      	adds	r3, r0, #1
 8000f1e:	4604      	mov	r4, r0
 8000f20:	d14d      	bne.n	8000fbe <_malloc_r+0xde>
 8000f22:	6834      	ldr	r4, [r6, #0]
 8000f24:	4626      	mov	r6, r4
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d140      	bne.n	8000fac <_malloc_r+0xcc>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	4638      	mov	r0, r7
 8000f30:	eb04 0803 	add.w	r8, r4, r3
 8000f34:	f000 f848 	bl	8000fc8 <_sbrk_r>
 8000f38:	4580      	cmp	r8, r0
 8000f3a:	d13a      	bne.n	8000fb2 <_malloc_r+0xd2>
 8000f3c:	6821      	ldr	r1, [r4, #0]
 8000f3e:	3503      	adds	r5, #3
 8000f40:	1a6d      	subs	r5, r5, r1
 8000f42:	f025 0503 	bic.w	r5, r5, #3
 8000f46:	3508      	adds	r5, #8
 8000f48:	2d0c      	cmp	r5, #12
 8000f4a:	bf38      	it	cc
 8000f4c:	250c      	movcc	r5, #12
 8000f4e:	4629      	mov	r1, r5
 8000f50:	4638      	mov	r0, r7
 8000f52:	f7ff ffa5 	bl	8000ea0 <sbrk_aligned>
 8000f56:	3001      	adds	r0, #1
 8000f58:	d02b      	beq.n	8000fb2 <_malloc_r+0xd2>
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	442b      	add	r3, r5
 8000f5e:	6023      	str	r3, [r4, #0]
 8000f60:	e00e      	b.n	8000f80 <_malloc_r+0xa0>
 8000f62:	6822      	ldr	r2, [r4, #0]
 8000f64:	1b52      	subs	r2, r2, r5
 8000f66:	d41e      	bmi.n	8000fa6 <_malloc_r+0xc6>
 8000f68:	2a0b      	cmp	r2, #11
 8000f6a:	d916      	bls.n	8000f9a <_malloc_r+0xba>
 8000f6c:	1961      	adds	r1, r4, r5
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	6025      	str	r5, [r4, #0]
 8000f72:	bf18      	it	ne
 8000f74:	6059      	strne	r1, [r3, #4]
 8000f76:	6863      	ldr	r3, [r4, #4]
 8000f78:	bf08      	it	eq
 8000f7a:	6031      	streq	r1, [r6, #0]
 8000f7c:	5162      	str	r2, [r4, r5]
 8000f7e:	604b      	str	r3, [r1, #4]
 8000f80:	4638      	mov	r0, r7
 8000f82:	f104 060b 	add.w	r6, r4, #11
 8000f86:	f000 f8cf 	bl	8001128 <__malloc_unlock>
 8000f8a:	f026 0607 	bic.w	r6, r6, #7
 8000f8e:	1d23      	adds	r3, r4, #4
 8000f90:	1af2      	subs	r2, r6, r3
 8000f92:	d0b6      	beq.n	8000f02 <_malloc_r+0x22>
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	50a3      	str	r3, [r4, r2]
 8000f98:	e7b3      	b.n	8000f02 <_malloc_r+0x22>
 8000f9a:	6862      	ldr	r2, [r4, #4]
 8000f9c:	42a3      	cmp	r3, r4
 8000f9e:	bf0c      	ite	eq
 8000fa0:	6032      	streq	r2, [r6, #0]
 8000fa2:	605a      	strne	r2, [r3, #4]
 8000fa4:	e7ec      	b.n	8000f80 <_malloc_r+0xa0>
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	6864      	ldr	r4, [r4, #4]
 8000faa:	e7b2      	b.n	8000f12 <_malloc_r+0x32>
 8000fac:	4634      	mov	r4, r6
 8000fae:	6876      	ldr	r6, [r6, #4]
 8000fb0:	e7b9      	b.n	8000f26 <_malloc_r+0x46>
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4638      	mov	r0, r7
 8000fb8:	f000 f8b6 	bl	8001128 <__malloc_unlock>
 8000fbc:	e7a1      	b.n	8000f02 <_malloc_r+0x22>
 8000fbe:	6025      	str	r5, [r4, #0]
 8000fc0:	e7de      	b.n	8000f80 <_malloc_r+0xa0>
 8000fc2:	bf00      	nop
 8000fc4:	20000090 	.word	0x20000090

08000fc8 <_sbrk_r>:
 8000fc8:	b538      	push	{r3, r4, r5, lr}
 8000fca:	4d06      	ldr	r5, [pc, #24]	; (8000fe4 <_sbrk_r+0x1c>)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	602b      	str	r3, [r5, #0]
 8000fd4:	f7ff fb0a 	bl	80005ec <_sbrk>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_sbrk_r+0x1a>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_sbrk_r+0x1a>
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	20000098 	.word	0x20000098

08000fe8 <__sread>:
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	460c      	mov	r4, r1
 8000fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff0:	f000 f8a0 	bl	8001134 <_read_r>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	bfab      	itete	ge
 8000ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8000ffc:	181b      	addge	r3, r3, r0
 8000ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001002:	bfac      	ite	ge
 8001004:	6563      	strge	r3, [r4, #84]	; 0x54
 8001006:	81a3      	strhlt	r3, [r4, #12]
 8001008:	bd10      	pop	{r4, pc}

0800100a <__swrite>:
 800100a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800100e:	461f      	mov	r7, r3
 8001010:	898b      	ldrh	r3, [r1, #12]
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	4605      	mov	r5, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4616      	mov	r6, r2
 800101a:	d505      	bpl.n	8001028 <__swrite+0x1e>
 800101c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001020:	2302      	movs	r3, #2
 8001022:	2200      	movs	r2, #0
 8001024:	f000 f868 	bl	80010f8 <_lseek_r>
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800102e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001032:	81a3      	strh	r3, [r4, #12]
 8001034:	4632      	mov	r2, r6
 8001036:	463b      	mov	r3, r7
 8001038:	4628      	mov	r0, r5
 800103a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800103e:	f000 b817 	b.w	8001070 <_write_r>

08001042 <__sseek>:
 8001042:	b510      	push	{r4, lr}
 8001044:	460c      	mov	r4, r1
 8001046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800104a:	f000 f855 	bl	80010f8 <_lseek_r>
 800104e:	1c43      	adds	r3, r0, #1
 8001050:	89a3      	ldrh	r3, [r4, #12]
 8001052:	bf15      	itete	ne
 8001054:	6560      	strne	r0, [r4, #84]	; 0x54
 8001056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800105a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800105e:	81a3      	strheq	r3, [r4, #12]
 8001060:	bf18      	it	ne
 8001062:	81a3      	strhne	r3, [r4, #12]
 8001064:	bd10      	pop	{r4, pc}

08001066 <__sclose>:
 8001066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800106a:	f000 b813 	b.w	8001094 <_close_r>
	...

08001070 <_write_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4d07      	ldr	r5, [pc, #28]	; (8001090 <_write_r+0x20>)
 8001074:	4604      	mov	r4, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4611      	mov	r1, r2
 800107a:	2200      	movs	r2, #0
 800107c:	602a      	str	r2, [r5, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	f7ff fa63 	bl	800054a <_write>
 8001084:	1c43      	adds	r3, r0, #1
 8001086:	d102      	bne.n	800108e <_write_r+0x1e>
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	b103      	cbz	r3, 800108e <_write_r+0x1e>
 800108c:	6023      	str	r3, [r4, #0]
 800108e:	bd38      	pop	{r3, r4, r5, pc}
 8001090:	20000098 	.word	0x20000098

08001094 <_close_r>:
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4d06      	ldr	r5, [pc, #24]	; (80010b0 <_close_r+0x1c>)
 8001098:	2300      	movs	r3, #0
 800109a:	4604      	mov	r4, r0
 800109c:	4608      	mov	r0, r1
 800109e:	602b      	str	r3, [r5, #0]
 80010a0:	f7ff fa6f 	bl	8000582 <_close>
 80010a4:	1c43      	adds	r3, r0, #1
 80010a6:	d102      	bne.n	80010ae <_close_r+0x1a>
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	b103      	cbz	r3, 80010ae <_close_r+0x1a>
 80010ac:	6023      	str	r3, [r4, #0]
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
 80010b0:	20000098 	.word	0x20000098

080010b4 <_fstat_r>:
 80010b4:	b538      	push	{r3, r4, r5, lr}
 80010b6:	4d07      	ldr	r5, [pc, #28]	; (80010d4 <_fstat_r+0x20>)
 80010b8:	2300      	movs	r3, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	602b      	str	r3, [r5, #0]
 80010c2:	f7ff fa6a 	bl	800059a <_fstat>
 80010c6:	1c43      	adds	r3, r0, #1
 80010c8:	d102      	bne.n	80010d0 <_fstat_r+0x1c>
 80010ca:	682b      	ldr	r3, [r5, #0]
 80010cc:	b103      	cbz	r3, 80010d0 <_fstat_r+0x1c>
 80010ce:	6023      	str	r3, [r4, #0]
 80010d0:	bd38      	pop	{r3, r4, r5, pc}
 80010d2:	bf00      	nop
 80010d4:	20000098 	.word	0x20000098

080010d8 <_isatty_r>:
 80010d8:	b538      	push	{r3, r4, r5, lr}
 80010da:	4d06      	ldr	r5, [pc, #24]	; (80010f4 <_isatty_r+0x1c>)
 80010dc:	2300      	movs	r3, #0
 80010de:	4604      	mov	r4, r0
 80010e0:	4608      	mov	r0, r1
 80010e2:	602b      	str	r3, [r5, #0]
 80010e4:	f7ff fa69 	bl	80005ba <_isatty>
 80010e8:	1c43      	adds	r3, r0, #1
 80010ea:	d102      	bne.n	80010f2 <_isatty_r+0x1a>
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	b103      	cbz	r3, 80010f2 <_isatty_r+0x1a>
 80010f0:	6023      	str	r3, [r4, #0]
 80010f2:	bd38      	pop	{r3, r4, r5, pc}
 80010f4:	20000098 	.word	0x20000098

080010f8 <_lseek_r>:
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4d07      	ldr	r5, [pc, #28]	; (8001118 <_lseek_r+0x20>)
 80010fc:	4604      	mov	r4, r0
 80010fe:	4608      	mov	r0, r1
 8001100:	4611      	mov	r1, r2
 8001102:	2200      	movs	r2, #0
 8001104:	602a      	str	r2, [r5, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	f7ff fa62 	bl	80005d0 <_lseek>
 800110c:	1c43      	adds	r3, r0, #1
 800110e:	d102      	bne.n	8001116 <_lseek_r+0x1e>
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	b103      	cbz	r3, 8001116 <_lseek_r+0x1e>
 8001114:	6023      	str	r3, [r4, #0]
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 8001118:	20000098 	.word	0x20000098

0800111c <__malloc_lock>:
 800111c:	4801      	ldr	r0, [pc, #4]	; (8001124 <__malloc_lock+0x8>)
 800111e:	f7ff be0b 	b.w	8000d38 <__retarget_lock_acquire_recursive>
 8001122:	bf00      	nop
 8001124:	2000008c 	.word	0x2000008c

08001128 <__malloc_unlock>:
 8001128:	4801      	ldr	r0, [pc, #4]	; (8001130 <__malloc_unlock+0x8>)
 800112a:	f7ff be06 	b.w	8000d3a <__retarget_lock_release_recursive>
 800112e:	bf00      	nop
 8001130:	2000008c 	.word	0x2000008c

08001134 <_read_r>:
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	4d07      	ldr	r5, [pc, #28]	; (8001154 <_read_r+0x20>)
 8001138:	4604      	mov	r4, r0
 800113a:	4608      	mov	r0, r1
 800113c:	4611      	mov	r1, r2
 800113e:	2200      	movs	r2, #0
 8001140:	602a      	str	r2, [r5, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	f7ff f9e4 	bl	8000510 <_read>
 8001148:	1c43      	adds	r3, r0, #1
 800114a:	d102      	bne.n	8001152 <_read_r+0x1e>
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	b103      	cbz	r3, 8001152 <_read_r+0x1e>
 8001150:	6023      	str	r3, [r4, #0]
 8001152:	bd38      	pop	{r3, r4, r5, pc}
 8001154:	20000098 	.word	0x20000098

08001158 <_init>:
 8001158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115a:	bf00      	nop
 800115c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115e:	bc08      	pop	{r3}
 8001160:	469e      	mov	lr, r3
 8001162:	4770      	bx	lr

08001164 <_fini>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	bf00      	nop
 8001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116a:	bc08      	pop	{r3}
 800116c:	469e      	mov	lr, r3
 800116e:	4770      	bx	lr
